import { expect, test } from "@playwright/test";
import Map from "./utils/map";
import AreaEditor from "./utils/map-editor/areaEditor";
import EntityEditor from "./utils/map-editor/entityEditor";
import { resetWamMaps } from "./utils/map-editor/uploader";
import MapEditor from "./utils/mapeditor";
import Menu from "./utils/menu";
import { map_storage_url } from "./utils/urls";
import { getPage } from "./utils/auth";
import {isMobile} from "./utils/isMobile";

test.setTimeout(240_000); // Fix Webkit that can take more than 60s
test.use({
  baseURL: map_storage_url,
});

test.describe("Map editor interacting with object @oidc", () => {
  test.beforeEach(
    "Ignore tests on mobilechromium because map editor not available for mobile devices",
      ({ page }) => {
      //Map Editor not available on mobile
      if (isMobile(page)) {
        //eslint-disable-next-line playwright/no-skipped-test
        test.skip();
        return;
      }
    }
  );

  test("Success to interact with area", async ({ browser, request }) => {
    // Go to the map
    await resetWamMaps(request);
    const page = await getPage(browser, 'Admin1', Map.url("empty"));

    // Create area on the map for the test
    await Menu.openMapEditor(page);
    await MapEditor.openAreaEditor(page);
    await AreaEditor.drawArea(
      page,
      { x: 8 * 32 * 1.5, y: 8 * 32 * 1.5 },
      { x: 10 * 32 * 1.5, y: 10 * 32 * 1.5 }
    );
    await AreaEditor.setAreaName(page, "MyLinkZone");
    await AreaEditor.addProperty(page, "openWebsite");
    await AreaEditor.setOpenLinkProperty(
      page,
      "https://workadventu.re",
      "Show action toast with message"
    );
    await Menu.closeMapEditor(page);

    // Walk to the area
    await Map.teleportToPosition(page, 9 * 32, 9 * 32);

    // Test if the DomElement generated by the character is visible
    await expect(page.getByText('[SPACE] to open web site ðŸ‘€')).toBeVisible();
    await page.close();
    await page.context().close();
  });

  test("Success to interact with entity", async ({ browser, request, browserName }) => {
    // Skip the test on Webkit because the click up doesn't work
    if (browserName === "webkit") {
      //eslint-disable-next-line playwright/no-skipped-test
      test.skip();
      return;
    }

    // Go to the map
    await resetWamMaps(request);
    const page = await getPage(browser, 'Admin1', Map.url("empty"));

    // Create entity on the map for the test
    await Menu.openMapEditor(page);
    await MapEditor.openEntityEditor(page);
    await EntityEditor.selectEntity(page, 0, "small table");
    await EntityEditor.moveAndClick(page, 1, 8.5 * 32 * 1.5);
    await EntityEditor.clearEntitySelection(page);
    // await EntityEditor.moveAndClick(page, 1, 8.5 * 32 * 1.5);
    await EntityEditor.moveAndClick(page, 1, 8.5 * 32 * 1.45);
    await EntityEditor.setEntityName(page, "My Open Link");
    await EntityEditor.addProperty(page, "openWebsite");
    await EntityEditor.setOpenLinkProperty(page, "https://workadventu.re");
    await Menu.closeMapEditor(page);

    // Refresh the page to see the entity
    await page.goto(Map.url("empty"));
    // Wait for the map to be loaded
    await Menu.waitForMapLoad(page);
    //await expect(page.locator("button#menuIcon").nth(0)).toBeVisible();

    // Move to the entity
    await EntityEditor.moveAndRightClick(page, 0, 8.5 * 32 * 1.5);

    // Test if the DomElement generated by the character is visible
    await expect(page.locator("span.characterTriggerAction")).toBeVisible();
    await page.close();
    await page.context().close();
  });
});
